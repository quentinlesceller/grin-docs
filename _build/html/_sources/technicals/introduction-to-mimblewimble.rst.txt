Technical Introduction to Mimblewimble
======================================

Tongue Tying for Everyone
-------------------------

This document is targeted at readers with a good understanding of
blockchains and basic cryptography. With that in mind, we attempt to
explain the technical buildup of Mimblewimble and how it’s applied in
Grin. We hope this document is understandable to most technically-minded
readers. Our objective is to encourage you to get interested in Grin and
contribute in any way possible.

To achieve this objective, we will introduce the main concepts required
for a good understanding of Grin as a Mimblewimble implementation. We
will start with a brief description of some relevant properties of
Elliptic Curve Cryptography (ECC) to lay the foundation on which Grin is
based and then describe all the key elements of a Mimblewimble
blockchain’s transactions and blocks.

Tiny Bits of Elliptic Curves
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We start with a brief primer on Elliptic Curve Cryptography, reviewing
just the properties necessary to understand how Mimblewimble works and
without delving too much into the intricacies of ECC. For readers who
would want to dive deeper into those assumptions, there are other
opportunities to `learn more`_.

An Elliptic Curve for the purpose of cryptography is simply a large set
of points that we will call *C*. These points can be added, subtracted,
or multiplied by integers (also called scalars). Given such a point *H*,
an integer *k* and using the scalar multiplication operation we can
compute ``k*H``, which is also a point on curve *C*. Given another
integer *j* we can also calculate ``(k+j)*H``, which equals
``k*H + j*H``. The addition and scalar multiplication operations on an
elliptic curve maintain the commutative and associative properties of
addition and multiplication:

::

   (k+j)*H = k*H + j*H

In ECC, if we pick a very large number *k* as a private key, ``k*H`` is
considered the corresponding public key. Even if one knows the value of
the public key ``k*H``, deducing *k* is close to impossible (or said
differently, while multiplication is trivial, “division” by curve points
is extremely difficult).

The previous formula ``(k+j)*H = k*H + j*H``, with *k* and *j* both
private keys, demonstrates that a public key obtained from the addition
of two private keys (``(k+j)*H``) is identical to the addition of the
public keys for each of those two private keys (``k*H + j*H``). In the
Bitcoin blockchain, Hierarchical Deterministic wallets heavily rely on
this principle. Mimblewimble and the Grin implementation do as well.

Transacting with Mimblewimble
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The structure of transactions demonstrates a crucial tenet of
Mimblewimble: strong privacy and confidentiality guarantees.

The validation of Mimblewimble transactions relies on two basic
properties:

-  **Verification of zero sums.** The sum of outputs minus inputs always
   equals zero, proving that the transaction did not create new funds,
   \_without revealing

.. _learn more: http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/